name: BhinnekaBot (TON Premium)

on:
  schedule:
    - cron: "0 */6 * * *"      # UTC, tiap 6 jam
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: bhinnekabot
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 350

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Run pertama: mungkin belum ada artifact -> abaikan error
      - name: Restore DB artifact (if exists)
        uses: actions/download-artifact@v4
        with:
          name: bhinneka-db
          path: .
        continue-on-error: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Show files (debug)
        run: ls -al

      # --- Diagnostics & hardening ---

      - name: Validate secrets (fail early if missing)
        shell: bash
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          TON_DEST_ADDRESS: ${{ secrets.TON_DEST_ADDRESS }}
        run: |
          set -e
          if [ -z "$BOT_TOKEN" ]; then echo "ERROR: BOT_TOKEN is empty"; exit 1; fi
          if [ -z "$TON_DEST_ADDRESS" ]; then echo "ERROR: TON_DEST_ADDRESS is empty"; exit 1; fi
          echo "Secrets look OK."

      - name: Brief env info (safe)
        shell: bash
        env:
          TON_DEST_ADDRESS: ${{ secrets.TON_DEST_ADDRESS }}
          PREMIUM_PRICE_TON: ${{ secrets.PREMIUM_PRICE_TON }}
          PREMIUM_DAYS: ${{ secrets.PREMIUM_DAYS }}
        run: |
          python -V
          pip show aiogram aiosqlite httpx python-dotenv | sed -n '1,3p' || true
          echo "TON_DEST_ADDRESS: ${TON_DEST_ADDRESS}"
          echo "PREMIUM_PRICE_TON: ${PREMIUM_PRICE_TON}"
          echo "PREMIUM_DAYS: ${PREMIUM_DAYS}"

      # Jika sebelumnya pernah memakai webhook, ini memastikan polling menerima update
      - name: Ensure polling (delete webhook)
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook" || true
          echo "Webhook deleted (if any)."

      # Pastikan DB ada supaya upload sukses di run pertama (tanpa heredoc).
      - name: Ensure DB file exists (first run safety)
        run: |
          if [ ! -f bhinneka.db ]; then
            python -c "import sqlite3; con=sqlite3.connect('bhinneka.db'); con.execute('CREATE TABLE IF NOT EXISTS _init(id INTEGER)'); con.commit(); con.close()"
          fi
          ls -l bhinneka.db

      # --- Start bot ---

      - name: Run bot (auto-stop after 5h45m)
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          TON_DEST_ADDRESS: ${{ secrets.TON_DEST_ADDRESS }}
          TONCENTER_API: ${{ secrets.TONCENTER_API }}
          TONCENTER_API_KEY: ${{ secrets.TONCENTER_API_KEY }}
          PREMIUM_PRICE_TON: ${{ secrets.PREMIUM_PRICE_TON }}
          PREMIUM_DAYS: ${{ secrets.PREMIUM_DAYS }}
          PYTHONUNBUFFERED: "1"
        run: |
          set -e
          echo "Starting BhinnekaBot..."
          timeout 5h45m python -u bhinnekabot.py || true

      - name: Upload DB artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bhinneka-db
          path: bhinneka.db
          retention-days: 14
