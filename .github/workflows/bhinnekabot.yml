name: BhinnekaBot (TON Premium)

on:
  schedule:
    - cron: "0 */6 * * *"     # every 6 hours
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: bhinnekabot
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 355

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore DB artifact (if exists)
        uses: actions/download-artifact@v4
        with:
          name: bhinneka-db
          path: .
        continue-on-error: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Show files (debug)
        run: ls -al

      - name: Check Telegram token (getMe)
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          set -euo pipefail
          curl -fsS "https://api.telegram.org/bot${BOT_TOKEN}/getMe" | tee getme.json

      - name: Ensure polling (delete webhook)
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          set -euo pipefail
          curl -fsS -X POST "https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook" | tee delwh.json

      - name: Ensure DB file exists (first run safety)
        run: |
          if [ ! -f bhinneka.db ]; then
            python - <<'PY'
            import sqlite3
            con = sqlite3.connect('bhinneka.db')
            con.execute('CREATE TABLE IF NOT EXISTS _init(id INTEGER)')
            con.commit(); con.close()
            PY
          fi
          ls -l bhinneka.db

      - name: Run bot (with logs, 345m timeout)
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          TON_DEST_ADDRESS: ${{ secrets.TON_DEST_ADDRESS }}
          TONCENTER_API: ${{ secrets.TONCENTER_API }}
          TONCENTER_API_KEY: ${{ secrets.TONCENTER_API_KEY }}
          PREMIUM_PRICE_TON: ${{ secrets.PREMIUM_PRICE_TON }}
          PREMIUM_DAYS: ${{ secrets.PREMIUM_DAYS }}
          PYTHONUNBUFFERED: "1"
        run: |
          set -euo pipefail
          echo "Starting BhinnekaBot..."
          # keep bot alive ~345 minutes (just under 6 hours)
          timeout 345m bash -o pipefail -c 'python -u bhinnekabot.py 2>&1 | tee bhinnekabot.log'
          ec=$?
          echo "exit code: $ec"
          # 124 = timeout reached → success (rotation)
          if [ "$ec" -eq 124 ]; then
            echo "Rotation timeout reached — treating as success."
            exit 0
          fi
          exit "$ec"

      - name: Upload artifacts (DB + logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bhinneka-run
          path: |
            bhinneka.db
            bhinnekabot.log
            getme.json
            delwh.json
          retention-days: 14

      - name: Upload DB artifact (compat)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bhinneka-db
          path: bhinneka.db
          retention-days: 14
